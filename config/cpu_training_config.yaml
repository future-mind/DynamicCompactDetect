# DynamicCompactDetect Configuration optimized for CPU training

# Dataset Configuration
dataset:
  name: 'coco'
  train_images: 'data/coco/images/train2017'
  val_images: 'data/coco/images/val2017'
  train_annotations: 'data/coco/annotations/instances_train2017.json'
  val_annotations: 'data/coco/annotations/instances_val2017.json'
  num_classes: 80

# Input Configuration
input:
  size: [640, 640]
  channels: 3
  normalize: true
  mean: [0.485, 0.456, 0.406]
  std: [0.229, 0.224, 0.225]

# Model Configuration
model:
  name: 'dynamic_compact_detect'
  backbone: 'cspresnet50'
  neck: 'fpn'
  pretrained: true
  freeze_backbone: false
  activation: 'silu'
  num_exit_points: 3
  exit_thresholds: [0.5, 0.7, 0.9]
  exit_layers: ['layer1', 'layer2', 'layer3']
  input_size: [640, 640]
  num_classes: 80
  base_channels: 32
  use_dynamic_blocks: false  # Disable dynamic blocks

# Training Configuration - Optimized for CPU
training:
  batch_size: 4  # Smaller batch size for CPU
  epochs: 100
  optimizer: 'adamw'
  learning_rate: 0.001
  weight_decay: 0.0005
  momentum: 0.937
  clip_gradients: 1.0  # Reduced gradient clipping
  warmup_epochs: 3
  warmup_lr_init: 0.0001
  warmup_momentum: 0.8
  lr_scheduler: 'cosine'
  lr_decay_steps: [60, 80]
  lr_decay_factor: 0.1
  dynamic_routing_schedule_start: 0.1
  mixed_precision: false  # Disable mixed precision for CPU
  
# Augmentations - Reduced for faster CPU processing
augmentation:
  hsv_h: 0.015
  hsv_s: 0.7
  hsv_v: 0.4
  flip_lr: 0.5
  mosaic_prob: 0.0
  mixup_prob: 0.0
  use_cutout: false
  use_solarize: false
  
# Loss Configuration
loss:
  box_loss_weight: 0.05
  obj_loss_weight: 1.0
  cls_loss_weight: 0.5
  exit_loss_weights: [0.5, 0.75, 1.0]
  iou_loss_type: 'ciou'
  
# Detection Settings
detection:
  conf_threshold: 0.25
  iou_threshold: 0.45
  max_detections: 300
  
# Evaluation Settings
evaluation:
  iou_thres: 0.5
  conf_thres: 0.001
  nms_thres: 0.6
  
# Validation Settings
validation:
  batch_size: 4
  conf_threshold: 0.25
  iou_threshold: 0.45
  frequency: 10  # Validate less frequently to speed up training
  
# Checkpointing
checkpointing:
  save_dir: 'checkpoints/cpu_training'
  save_every: 10
  save_best: true
  metric: 'map'
  
# Early Stopping
early_stopping:
  enabled: true
  patience: 10
  min_delta: 0.001
  mode: 'max'
  
# Logging
logging:
  tensorboard: true
  log_dir: 'logs/cpu_training'
  log_interval: 50  # Log less frequently

# Hardware Configuration - CPU Optimized
hardware:
  gpu_ids: []  # Empty list for CPU only
  num_workers: 8  # Use more workers for CPU data loading
  pinned_memory: false  # No need for pinned memory with CPU
  distributed: false
  sync_bn: false
  use_platform_optimizations: true
  memory_efficient: true 